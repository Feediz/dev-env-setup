#!/bin/sh

# =================================================================
# Setup color constants
# =================================================================
# Reset
Color_Off='\033[0m'       # Text Reset

# Regular Colors
Black='\033[0;30m'        # Black
Red='\033[0;31m'          # Red
Green='\033[0;32m'        # Green
Yellow='\033[0;33m'       # Yellow
Blue='\033[0;34m'         # Blue
Purple='\033[0;35m'       # Purple
Cyan='\033[0;36m'         # Cyan
White='\033[0;37m'        # White

# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

# Underline
UBlack='\033[4;30m'       # Black
URed='\033[4;31m'         # Red
UGreen='\033[4;32m'       # Green
UYellow='\033[4;33m'      # Yellow
UBlue='\033[4;34m'        # Blue
UPurple='\033[4;35m'      # Purple
UCyan='\033[4;36m'        # Cyan
UWhite='\033[4;37m'       # White

# Background
On_Black='\033[40m'       # Black
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
On_Yellow='\033[43m'      # Yellow
On_Blue='\033[44m'        # Blue
On_Purple='\033[45m'      # Purple
On_Cyan='\033[46m'        # Cyan
On_White='\033[47m'       # White

# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White

# Bold High Intensity
BIBlack='\033[1;90m'      # Black
BIRed='\033[1;91m'        # Red
BIGreen='\033[1;92m'      # Green
BIYellow='\033[1;93m'     # Yellow
BIBlue='\033[1;94m'       # Blue
BIPurple='\033[1;95m'     # Purple
BICyan='\033[1;96m'       # Cyan
BIWhite='\033[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White


# =================================================================
# Functions
# =================================================================
customPrint() {
    local msg="$1"
    local type="${2:-info}"
    
    case "$type" in
        info)
            printf "${Green}${msg}${Color_Off}\n"
            ;;
        warning)
            printf "${Yellow}${msg}${Color_Off}\n"
            ;;
        error)
            printf "${Red}${msg}${Color_Off}\n"
            ;;
        *)
            printf "${White}${msg}${Color_Off}\n"
            ;;
    esac
}

customPrintCMD() {
    local cmd="$1"
    customPrint "Running the following command: [$cmd]" "info"
}

runCMD() {
    local cmd="$1"
    customPrintCMD "$cmd"
    eval "$cmd"
    if [ $? -ne 0 ]; then
        customPrint "Command failed: [$cmd]" "error"
        exit 1
    fi
}

showUsage() {
    customPrint "Usage: $0 {setup|delete} project_name" "info"
    customPrint "  setup:  Sets up a new project with the given project_name" "info"
    customPrint "  delete: Deletes the project with the given project_name" "info"
    customPrint "Example:" "info"
    customPrint "  $0 setup myproject.test" "info"
    customPrint "  $0 delete myproject.test" "info"
}

setupProject() {
    local project_name="$1"
    local www_path="${2:-/Users/fidelh/www}"
    local vhost_file_path="${3:-/usr/local/etc/httpd/extra/httpd-vhosts.conf}"

    if [ -z "$project_name" ]; then
        customPrint "A Project name is required, please call this function as [ ~/setup-dev-env project_name.test ]" "error"
        exit 1
    fi

    # set up directory
    runCMD "cp -a $www_path/template_env/. $www_path/$project_name"

    # cd into the project
    runCMD "cd $www_path/$project_name/ssl_certs"

    # make the cert
    runCMD "mkcert $project_name"

    # append to vhost file
    sudo cp "$vhost_file_path" "${vhost_file_path}.original"
    {
        echo ""
        echo "# ================================================================================================="
        echo "#                                   $project_name"
        echo "# ================================================================================================="
        echo "<VirtualHost *:80>"
        echo "    ServerAdmin fidel@test.com"
        echo "    ServerName $project_name"
        echo "    DocumentRoot $www_path/$project_name"
        echo "    ErrorLog $www_path/$project_name/Logs/error.log"
        echo "    # CustomLog $www_path/$project_name/access.log"
        echo ""
        echo "    <Directory $www_path/$project_name>"
        echo "        Require all granted"
        echo "        AllowOverride All"
        echo "    </Directory>"
        echo "</VirtualHost>"
        echo ""
        echo "<IfModule mod_ssl.c>"
        echo "    <VirtualHost *:443>"
        echo "        ServerAdmin fidel@test.com"
        echo "        ServerName $project_name"
        echo "        DocumentRoot $www_path/$project_name"
        echo "        ErrorLog $www_path/$project_name/Logs/error.log"
        echo "        # CustomLog $www_path/$project_name/access.log"
        echo "        SSLEngine On"
        echo "        SSLCertificateFile $www_path/$project_name/ssl_certs/$project_name.pem"
        echo "        SSLCertificateKeyFile $www_path/$project_name/ssl_certs/$project_name-key.pem"
        echo "        <Directory $www_path/$project_name>"
        echo "            AllowOverride All"
        echo "            Options Indexes FollowSymLinks"
        echo "            Require all granted"
        echo "        </Directory>"
        echo "    </VirtualHost>"
        echo "</IfModule>"
        echo ""
    } | sudo tee -a "$vhost_file_path" > /dev/null

    # append to hosts file
    sudo cp /etc/hosts /etc/hosts.original
    echo "127.0.0.1    $project_name" | sudo tee -a /etc/hosts > /dev/null

    # restart all services
    runCMD "brew services restart --all"
}

deleteProject() {
    local project_name="$1"
    local www_path="${2:-/Users/fidelh/www}"
    local vhost_file_path="${3:-/usr/local/etc/httpd/extra/httpd-vhosts.conf}"

    if [ -z "$project_name" ]; then
        customPrint "A Project name is required, please call this function as [ ~/setup-dev-env delete project_name.test ]" "error"
        exit 1
    fi

    # Remove project directory
    runCMD "rm -rf $www_path/$project_name"

    # Remove virtual host entry from vhost file
    sudo cp "$vhost_file_path" "${vhost_file_path}.original"
    sudo sed -i '' "/#                                   $project_name/,/# =================================================================================================/d" "$vhost_file_path"

    # Remove entry from hosts file
    sudo cp /etc/hosts /etc/hosts.original
    sudo sed -i '' "/127.0.0.1[[:space:]]*$project_name/d" /etc/hosts

    # Restart all services
    runCMD "brew services restart --all"
}

# get the action and the new folder/url name
action=$1
project_name=$2

if [ -z "$action" ] || [ -z "$project_name" ]; then
    showUsage
    exit 1
fi

case "$action" in
    setup)
        setupProject "$project_name"
        ;;
    delete)
        deleteProject "$project_name"
        ;;
    *)
        customPrint "Invalid action: $action" "error"
        showUsage
        exit 1
        ;;
esac
